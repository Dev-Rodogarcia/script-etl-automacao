package br.com.extrator.auditoria;

/**
 * Enum que representa os poss√≠veis status de uma auditoria.
 * Define os estados pelos quais uma auditoria pode passar durante sua execu√ß√£o.
 */
public enum StatusAuditoria {
    /**
     * Auditoria ainda n√£o foi iniciada ou est√° aguardando execu√ß√£o
     */
    PENDENTE("Auditoria pendente", "‚è≥"),
    
    /**
     * Auditoria est√° sendo executada no momento
     */
    EM_ANDAMENTO("Auditoria em andamento", "üîÑ"),
    
    /**
     * Auditoria foi conclu√≠da com sucesso
     */
    CONCLUIDA("Auditoria conclu√≠da com sucesso", "‚úÖ"),
    
    /**
     * Auditoria falhou durante a execu√ß√£o
     */
    FALHA("Auditoria falhou", "‚ùå"),
    
    /**
     * Auditoria foi conclu√≠da mas com alertas
     */
    CONCLUIDA_COM_ALERTAS("Auditoria conclu√≠da com alertas", "‚ö†Ô∏è"),
    
    /**
     * Erro durante auditoria
     */
    ERRO("Erro durante auditoria", "üö®");

    private final String descricao;
    private final String icone;

    /**
     * Construtor do enum
     * @param descricao Descri√ß√£o textual do status
     * @param icone √çcone representativo do status
     */
    StatusAuditoria(String descricao, String icone) {
        this.descricao = descricao;
        this.icone = icone;
    }

    /**
     * Retorna a descri√ß√£o textual do status
     * @return Descri√ß√£o do status
     */
    public String getDescricao() {
        return descricao;
    }

    /**
     * Retorna o √≠cone representativo do status
     * @return √çcone do status
     */
    public String getIcone() {
        return icone;
    }

    /**
     * Retorna uma representa√ß√£o formatada do status com √≠cone e descri√ß√£o
     * @return Status formatado
     */
    public String getStatusFormatado() {
        return icone + " " + descricao;
    }

    @Override
    public String toString() {
        return getStatusFormatado();
    }
}