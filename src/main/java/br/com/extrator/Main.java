package br.com.extrator;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import br.com.extrator.api.ClienteApiDataExport;
import br.com.extrator.api.ClienteApiGraphQL;
import br.com.extrator.api.ClienteApiRest;
import br.com.extrator.db.ServicoBancoDadosDinamico;
import br.com.extrator.modelo.EntidadeDinamica;
import br.com.extrator.servicos.MetricasService;
import br.com.extrator.testes.TesteModoExecucao;

/**
 * Sistema de Extra√ß√£o de Dados do ESL Cloud
 *
 * Este sistema orquestra a extra√ß√£o de dados das 3 APIs do ESL Cloud:
 * - API REST: Faturas e Ocorr√™ncias
 * - API GraphQL: Coletas
 * - API Data Export: Manifestos e Localiza√ß√£o da Carga
 *
 * O sistema processa cada API com intervalos de 2 segundos entre elas,
 * salvando todos os dados no banco SQL Server local.
 *
 * @author Sistema de Extra√ß√£o ESL Cloud
 * @version 2.0
 */
public class Main {
    private static final Logger logger = LoggerFactory.getLogger(Main.class);

    // Vari√°veis para controle de estat√≠sticas
    private static int totalEntidadesExtraidas = 0;
    private static int totalEntidadesProcessadas = 0;
    private static final List<String> sucessos = new ArrayList<>();
    private static final List<String> erros = new ArrayList<>();
    private static final List<String> avisos = new ArrayList<>();

    // Constantes para o sistema de gest√£o de estado
    private static final String ARQUIVO_ULTIMO_RUN = "last_run.properties";
    private static final String PROPRIEDADE_ULTIMO_RUN = "last_successful_run";

    public static void main(String[] args) {
        // Verifica se o usu√°rio quer apenas validar os dados de acesso
        if (args.length > 0 && "--validar".equals(args[0])) {
            validarDadosAcesso();
            return;
        }

        // Verifica se foi solicitada ajuda
        if (args.length > 0 && ("--ajuda".equals(args[0]) || "--help".equals(args[0]))) {
            TesteModoExecucao.exibirAjuda();
            return;
        }

        // Verifica se o usu√°rio quer fazer introspec√ß√£o GraphQL
        if (args.length > 0 && "--introspeccao".equals(args[0])) {
            realizarIntrospeccaoGraphQL();
            return;
        }

        // Inicializa o gerenciador do modo de teste
        TesteModoExecucao testeModo = new TesteModoExecucao(args);
        
        // Valida os argumentos fornecidos
        if (!TesteModoExecucao.validarArgumentos(args)) {
            System.err.println("Argumentos inv√°lidos!");
            TesteModoExecucao.exibirAjuda();
            System.exit(1);
        }

        // Exibe informa√ß√µes sobre o modo de execu√ß√£o
        testeModo.exibirInformacoesModo();

        // Exibe banner no console para melhor visualiza√ß√£o
        exibirBanner();

        logger.info("Iniciando processo de extra√ß√£o de dados das 3 APIs do ESL Cloud (Modo Teste: {})", 
                testeModo.isModoTesteAtivo());
        System.out.println("\n" + "=".repeat(60));
        System.out.println("INICIANDO PROCESSO DE EXTRA√á√ÉO DE DADOS");
        System.out.println("=".repeat(60));
        System.out.println("Sistema: Extra√ß√£o de dados das 3 APIs do ESL Cloud ");
        System.out.println("Vers√£o: 2.0 by @valentelucass");
        System.out.println("Modo: " + (testeModo.isModoTesteAtivo() ? "TESTE (limitado)" : "NORMAL (completo)"));
        System.out.println("In√≠cio: " + LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss")));
        System.out.println("=".repeat(60) + "\n");

        try {
            // Guarda o timestamp do in√≠cio da execu√ß√£o atual
            LocalDateTime inicioExecucao = LocalDateTime.now();

            // Inst√¢ncia do servi√ßo de m√©tricas
        MetricasService metricasService = MetricasService.getInstance();
        
        // Verifica se as configura√ß√µes foram personalizadas
        logger.info("Verificando configura√ß√µes");
        System.out.println("    [ETAPA 1/13] Verificando configura√ß√µes do sistema...");
        // Nota: A valida√ß√£o de configura√ß√µes agora √© feita automaticamente atrav√©s do fail-fast
        // quando as vari√°veis de ambiente obrigat√≥rias s√£o acessadas pela primeira vez
        System.out.println("    Configura√ß√µes validadas com sucesso!");
        System.out.println("    üí° Dica: Para maior seguran√ßa, use vari√°veis de ambiente:");
        System.out.println("       Windows: $env:API_BASEURL=\"sua_url\" | Linux: export API_BASEURL=\"sua_url\"");
        sucessos.add("Configura√ß√µes do sistema validadas");
        System.out.println();

            // Valida conex√£o com banco de dados
            logger.info("Validando conex√£o com banco de dados");
            System.out.println("    [ETAPA 2/13] Validando conex√£o com o banco de dados SQL Server...");
            br.com.extrator.util.CarregadorConfig.validarConexaoBancoDados();
            System.out.println("    Conex√£o com banco de dados validada com sucesso!");
            sucessos.add("Conex√£o com banco de dados estabelecida");
            System.out.println();

            // Inicializa o servi√ßo de banco de dados din√¢mico
            logger.info("Inicializando banco de dados");
            System.out.println("    [ETAPA 3/13] Inicializando servi√ßo de banco de dados...");
            ServicoBancoDadosDinamico servicoBD = new ServicoBancoDadosDinamico();
            System.out.println("    Servi√ßo de banco de dados inicializado com sucesso!");
            sucessos.add("Servi√ßo de banco de dados inicializado");
            System.out.println();

            // Inicializa os clientes das APIs
            logger.info("Inicializando clientes das APIs");
            System.out.println("    [ETAPA 4/13] Inicializando clientes das 3 APIs ESL Cloud...");
            ClienteApiRest clienteApiRest = new ClienteApiRest();
            ClienteApiGraphQL clienteApiGraphQL = new ClienteApiGraphQL();
            ClienteApiDataExport clienteApiDataExport = new ClienteApiDataExport();
            System.out.println("    Clientes das 3 APIs inicializados com sucesso!");
            sucessos.add("Clientes das APIs inicializados (REST, GraphQL, Data Export)");
            System.out.println();

            // Obt√©m a data de busca do gerenciador de teste
            String dataBusca = testeModo.getDataBusca();
            boolean modoTeste = testeModo.isModoTesteAtivo();
            
            System.out.println("    Data de busca configurada: " + dataBusca);
            if (modoTeste) {
                System.out.println("    Modo de teste: Limitando a " + testeModo.getLimiteRegistrosTeste() + " registros por entidade");
                sucessos.add("Modo de teste configurado (limite: " + testeModo.getLimiteRegistrosTeste() + " registros)");
            } else {
                sucessos.add("Modo normal configurado");
            }
            System.out.println();
            // Declara√ß√£o da vari√°vel modoAutomatico
            boolean modoAutomatico = false;
            
            // Verifica se deve usar modo autom√°tico (incremental)
            if (dataBusca == null || dataBusca.trim().isEmpty()) {
                // Modo Autom√°tico: usa carga incremental
                modoAutomatico = true;
                LocalDateTime dataInicio = lerDataUltimaExecucao();
                dataBusca = dataInicio.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);

                logger.info("Executando em modo incremental. Data de in√≠cio: {}", dataBusca);
                System.out.println("    Modo Incremental ativado");
                System.out.println("      Buscando dados desde: "
                        + dataInicio.format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss")));
                sucessos.add("Modo incremental configurado (desde " + 
                           dataInicio.format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss")) + ")");
            }
            System.out.println();

            // ========== ETAPA 5/13: EXTRA√á√ÉO DE FATURAS A RECEBER (API REST) ==========
            if (testeModo.isTestarRest() || testeModo.isModoNormal()) {
                logger.info("Extraindo Faturas a Receber da API REST");
                System.out.println("    [ETAPA 5/13] Extraindo Faturas a Receber da API REST...");

                try {
                    metricasService.iniciarTimer("extracao_faturas_receber");
                    List<EntidadeDinamica> faturasAReceber = clienteApiRest.buscarFaturasAReceber(dataBusca, modoTeste);
                    metricasService.pararTimer("extracao_faturas_receber");
                    
                    totalEntidadesExtraidas += faturasAReceber.size();
                    System.out.println("    Total de faturas a receber encontradas: " + faturasAReceber.size());

                    if (!faturasAReceber.isEmpty()) {
                        System.out.println("    Salvando faturas a receber no banco SQL Server...");
                        int processados = servicoBD.salvarEntidades(faturasAReceber, "faturas_a_receber");
                        totalEntidadesProcessadas += processados;
                        metricasService.adicionarRegistrosProcessados("faturas_a_receber", processados);
                        
                        System.out.println(
                                "    Faturas a receber salvas! Processadas: " + processados + "/" + faturasAReceber.size());
                        sucessos.add("Faturas a Receber extra√≠das e salvas: " + processados);
                    } else {
                        avisos.add("Nenhuma fatura a receber encontrada para o per√≠odo");
                    }
                    
                    metricasService.registrarSucesso("API_REST_Faturas_Receber");
                } catch (RuntimeException e) {
                    metricasService.registrarFalha("API_REST_Faturas_Receber");
                    logger.error("Falha na extra√ß√£o de Faturas a Receber: {}", e.getMessage());
                    System.out.println("    ‚ùå ERRO: Falha na extra√ß√£o de Faturas a Receber - " + e.getMessage());
                    erros.add("Faturas a Receber: " + e.getMessage());
                }
                
                // Pausa obrigat√≥ria entre APIs para respeitar o rate limit
                long throttlingMs = br.com.extrator.util.CarregadorConfig.obterThrottlingPadrao();
                logger.info("Aguardando {}ms antes da pr√≥xima API para respeitar o rate limit...", throttlingMs);
                System.out.println("    Aguardando " + throttlingMs + "ms antes da pr√≥xima API...");
                Thread.sleep(throttlingMs);
                System.out.println();
            } else {
                System.out.println("    [ETAPA 5/13] Extra√ß√£o de Faturas a Receber PULADA (modo de teste espec√≠fico)");
                System.out.println();
            }

            // ========== ETAPA 6/13: EXTRA√á√ÉO DE FATURAS A PAGAR (API REST) ==========
            if (testeModo.isTestarRest() || testeModo.isModoNormal()) {
                logger.info("Extraindo Faturas a Pagar da API REST");
                System.out.println("    [ETAPA 6/13] Extraindo Faturas a Pagar da API REST...");

                try {
                    metricasService.iniciarTimer("extracao_faturas_pagar");
                    List<EntidadeDinamica> faturasAPagar = clienteApiRest.buscarFaturasAPagar(dataBusca, modoTeste);
                    metricasService.pararTimer("extracao_faturas_pagar");
                    
                    totalEntidadesExtraidas += faturasAPagar.size();
                    System.out.println("    Total de faturas a pagar encontradas: " + faturasAPagar.size());

                    if (!faturasAPagar.isEmpty()) {
                        System.out.println("    Salvando faturas a pagar no banco SQL Server...");
                        int processados = servicoBD.salvarEntidades(faturasAPagar, "faturas_a_pagar");
                        totalEntidadesProcessadas += processados;
                        metricasService.adicionarRegistrosProcessados("faturas_a_pagar", processados);
                        
                        System.out.println("    Faturas a pagar salvas! Processadas: " + processados + "/" + faturasAPagar.size());
                        sucessos.add("Faturas a Pagar extra√≠das e salvas: " + processados);
                    } else {
                        avisos.add("Nenhuma fatura a pagar encontrada para o per√≠odo");
                    }
                    
                    metricasService.registrarSucesso("API_REST_Faturas_Pagar");
                } catch (RuntimeException e) {
                    metricasService.registrarFalha("API_REST_Faturas_Pagar");
                    logger.error("Falha na extra√ß√£o de Faturas a Pagar: {}", e.getMessage());
                    System.out.println("    ‚ùå ERRO: Falha na extra√ß√£o de Faturas a Pagar - " + e.getMessage());
                    erros.add("Faturas a Pagar: " + e.getMessage());
                }
                
                // Pausa obrigat√≥ria entre APIs para respeitar o rate limit
                long throttlingMs = br.com.extrator.util.CarregadorConfig.obterThrottlingPadrao();
                logger.info("Aguardando {}ms antes da pr√≥xima API para respeitar o rate limit...", throttlingMs);
                System.out.println("    Aguardando " + throttlingMs + "ms antes da pr√≥xima API...");
                Thread.sleep(throttlingMs);
                System.out.println();
            } else {
                System.out.println("    [ETAPA 6/13] Extra√ß√£o de Faturas a Pagar PULADA (modo de teste espec√≠fico)");
                System.out.println();
            }

            // ========== ETAPA 7/13: EXTRA√á√ÉO DE OCORR√äNCIAS (API REST) ==========
            if (testeModo.isTestarRest() || testeModo.isModoNormal()) {
                logger.info("Extraindo Ocorr√™ncias da API REST");
                System.out.println("    [ETAPA 7/13] Extraindo Ocorr√™ncias da API REST...");

                try {
                    metricasService.iniciarTimer("extracao_ocorrencias_rest");
                    // Chama o m√©todo que voc√™ corrigiu em ClienteApiRest.java
                    List<EntidadeDinamica> ocorrencias = clienteApiRest.buscarOcorrencias(dataBusca, modoTeste);
                    metricasService.pararTimer("extracao_ocorrencias_rest");
                    
                    totalEntidadesExtraidas += ocorrencias.size();

                    logger.info("Extra√ß√£o de ocorr√™ncias conclu√≠da. Total encontrado: {}", ocorrencias.size());
                    System.out.println("    Total de ocorr√™ncias encontradas: " + ocorrencias.size());

                    if (!ocorrencias.isEmpty()) {
                        logger.info("Salvando ocorr√™ncias no banco de dados");
                        System.out.println("    Salvando ocorr√™ncias no banco SQL Server...");

                        // Salva os resultados na tabela "ocorrencias"
                        int processados = servicoBD.salvarEntidades(ocorrencias, "ocorrencias");
                        totalEntidadesProcessadas += processados;
                        metricasService.adicionarRegistrosProcessados("ocorrencias", processados);

                        logger.info("Ocorr√™ncias salvas. Total processado: {}", processados);
                        System.out.println(
                                "    Ocorr√™ncias salvas com sucesso! Processadas: " + processados + "/" + ocorrencias.size());
                        sucessos.add("Ocorr√™ncias extra√≠das e salvas: " + processados + "/" + ocorrencias.size());
                    } else {
                        System.out.println("    Nenhuma ocorr√™ncia encontrada para o per√≠odo especificado");
                        avisos.add("Nenhuma ocorr√™ncia encontrada para o per√≠odo");
                    }
                    
                    metricasService.registrarSucesso("API_REST_Ocorrencias");
                } catch (RuntimeException e) {
                    metricasService.registrarFalha("API_REST_Ocorrencias");
                    logger.error("Falha na extra√ß√£o de Ocorr√™ncias: {}", e.getMessage());
                    System.out.println("    ‚ùå ERRO: Falha na extra√ß√£o de Ocorr√™ncias - " + e.getMessage());
                    erros.add("Ocorr√™ncias: " + e.getMessage());
                }

                // Pausa obrigat√≥ria entre APIs para respeitar o rate limit
                long throttlingMs = br.com.extrator.util.CarregadorConfig.obterThrottlingPadrao();
                logger.info("Aguardando {}ms antes da pr√≥xima API para respeitar o rate limit...", throttlingMs);
                System.out.println("    Aguardando " + throttlingMs + "ms antes da pr√≥xima API...");
                Thread.sleep(throttlingMs);
                System.out.println();
            } else {
                System.out.println("    [ETAPA 7/13] Extra√ß√£o de Ocorr√™ncias PULADA (modo de teste espec√≠fico)");
                System.out.println();
            }

            // ========== ETAPA 8/13: EXTRA√á√ÉO DE CONHECIMENTOS (API GRAPHQL) ==========
            if (testeModo.isTestarGraphQL() || testeModo.isModoNormal()) {
                logger.info("Extraindo Conhecimentos da API GraphQL");
                System.out.println("    [ETAPA 8/13] Extraindo Conhecimentos da API GraphQL...");

                try {
                    metricasService.iniciarTimer("extracao_coletas");
                    List<EntidadeDinamica> coletas = clienteApiGraphQL.buscarColetas(dataBusca, modoTeste);
                    metricasService.pararTimer("extracao_coletas");
                    
                    totalEntidadesExtraidas += coletas.size();

                    logger.info("Extra√ß√£o de coletas conclu√≠da. Total encontrado: {}", coletas.size());
                    System.out.println("    Total de coletas encontradas: " + coletas.size());

                    if (!coletas.isEmpty()) {
                        logger.info("Salvando coletas no banco de dados");
                        System.out.println("    Salvando coletas no banco SQL Server...");

                        int processados = servicoBD.salvarEntidades(coletas, "coletas");
                        totalEntidadesProcessadas += processados;
                        metricasService.adicionarRegistrosProcessados("coletas", processados);

                        logger.info("Coletas salvas. Total processado: {}", processados);
                        System.out.println(
                                "    Coletas salvas com sucesso! Processadas: " + processados + "/" + coletas.size());
                        sucessos.add("Coletas extra√≠das e salvas: " + processados + "/" + coletas.size());
                    } else {
                        System.out.println("    Nenhuma coleta encontrada para o per√≠odo especificado");
                        avisos.add("Nenhuma coleta encontrada para o per√≠odo");
                    }
                    
                    metricasService.registrarSucesso("API_GraphQL_Coletas");
                } catch (RuntimeException e) {
                    metricasService.registrarFalha("API_GraphQL_Coletas");
                    logger.error("Falha na extra√ß√£o de Coletas: {}", e.getMessage());
                    System.out.println("    ‚ùå ERRO: Falha na extra√ß√£o de Coletas - " + e.getMessage());
                    erros.add("Coletas: " + e.getMessage());
                }

                // Pausa obrigat√≥ria entre APIs para respeitar o rate limit
                long throttlingMs = br.com.extrator.util.CarregadorConfig.obterThrottlingPadrao();
                logger.info("Aguardando {}ms antes da pr√≥xima API para respeitar o rate limit...", throttlingMs);
                System.out.println("    Aguardando " + throttlingMs + "ms antes da pr√≥xima API...");
                Thread.sleep(throttlingMs);
                System.out.println();
            } else {
                System.out.println("    [ETAPA 8/13] Extra√ß√£o de Conhecimentos PULADA (modo de teste espec√≠fico)");
                System.out.println();
            }
            
            // ========== ETAPA 9/13: EXTRA√á√ÉO DE FRETES (API GRAPHQL) ==========
            if (testeModo.isTestarGraphQL() || testeModo.isModoNormal()) {
                logger.info("Extraindo fretes da API GraphQL");
                System.out.println("    [ETAPA 9/13] Extraindo Fretes da API GraphQL...");

                try {
                    metricasService.iniciarTimer("extracao_fretes_graphql");
                    List<EntidadeDinamica> fretes = clienteApiGraphQL.buscarFretes(dataBusca, modoTeste);
                    metricasService.pararTimer("extracao_fretes_graphql");
                    
                    totalEntidadesExtraidas += fretes.size();

                    logger.info("Extra√ß√£o de fretes conclu√≠da. Total encontrado: {}", fretes.size());
                    System.out.println("    Total de fretes encontrados: " + fretes.size());

                    if (!fretes.isEmpty()) {
                        logger.info("Salvando fretes no banco de dados");
                        System.out.println("    Salvando fretes no banco SQL Server...");

                        int processados = servicoBD.salvarEntidades(fretes, "fretes");
                        totalEntidadesProcessadas += processados;
                        metricasService.adicionarRegistrosProcessados("fretes", processados);

                        logger.info("Fretes salvos. Total processado: {}", processados);
                        System.out.println(
                                "    Fretes salvos com sucesso! Processados: " + processados + "/" + fretes.size());
                        sucessos.add("Fretes extra√≠dos e salvos: " + processados + "/" + fretes.size());
                    } else {
                        System.out.println("    Nenhum frete encontrado para o per√≠odo especificado");
                        avisos.add("Nenhum frete encontrado para o per√≠odo");
                    }
                    
                    metricasService.registrarSucesso("API_GraphQL_Fretes");
                } catch (RuntimeException e) {
                    metricasService.registrarFalha("API_GraphQL_Fretes");
                    logger.error("Falha na extra√ß√£o de Fretes: {}", e.getMessage());
                    System.out.println("    ‚ùå ERRO: Falha na extra√ß√£o de Fretes - " + e.getMessage());
                    erros.add("Fretes: " + e.getMessage());
                }

                // Pausa obrigat√≥ria entre APIs para respeitar o rate limit
                long throttlingMs = br.com.extrator.util.CarregadorConfig.obterThrottlingPadrao();
                logger.info("Aguardando {}ms antes da pr√≥xima API para respeitar o rate limit...", throttlingMs);
                System.out.println("    Aguardando " + throttlingMs + "ms antes da pr√≥xima API...");
                Thread.sleep(throttlingMs);
                System.out.println();
            } else {
                System.out.println("    [ETAPA 9/13] Extra√ß√£o de Fretes PULADA (modo de teste espec√≠fico)");
                System.out.println();
            }

            // ========== ETAPA 10/13: EXTRA√á√ÉO DE MANIFESTOS (API DATA EXPORT) ==========
            if (testeModo.isTestarDataExport() || testeModo.isModoNormal()) {
                logger.info("Extraindo Manifestos da API Data Export");
                System.out.println("    [ETAPA 10/13] Extraindo Manifestos da API Data Export...");

                try {
                    metricasService.iniciarTimer("extracao_manifestos");
                    List<EntidadeDinamica> manifestos = clienteApiDataExport.buscarManifestos(dataBusca, modoTeste);
                    metricasService.pararTimer("extracao_manifestos");
                    
                    totalEntidadesExtraidas += manifestos.size();

                    logger.info("Extra√ß√£o de manifestos conclu√≠da. Total encontrado: {}", manifestos.size());
                    System.out.println("    ‚úì Manifestos extra√≠dos da API: " + manifestos.size() + " registros");

                    if (!manifestos.isEmpty()) {
                        logger.info("Salvando manifestos no banco de dados");
                        System.out.println("    ‚úì Salvando manifestos no banco SQL Server...");

                        int processados = servicoBD.salvarEntidades(manifestos, "manifestos");
                        totalEntidadesProcessadas += processados;
                        metricasService.adicionarRegistrosProcessados("manifestos", processados);

                        logger.info("Manifestos salvos. Total processado: {}", processados);
                        
                        if (processados == manifestos.size()) {
                            System.out.println("    ‚úì Manifestos salvos com SUCESSO TOTAL! (" + processados + "/" + manifestos.size() + ")");
                            sucessos.add("API Data Export - Manifestos: " + processados + "/" + manifestos.size() + " registros processados com sucesso");
                        } else {
                            System.out.println("    ‚ö† Manifestos salvos com SUCESSO PARCIAL! (" + processados + "/" + manifestos.size() + ")");
                            avisos.add("API Data Export - Manifestos: processamento parcial (" + processados + "/" + manifestos.size() + ")");
                        }
                    } else {
                        System.out.println("    ‚ö† Nenhum manifesto encontrado para o per√≠odo especificado");
                        avisos.add("API Data Export - Manifestos: nenhum registro encontrado para o per√≠odo");
                    }
                    
                    metricasService.registrarSucesso("API_DataExport_Manifestos");
                } catch (IllegalArgumentException e) {
                    metricasService.registrarFalha("API_DataExport_Manifestos");
                    logger.error("Erro de par√¢metros na extra√ß√£o de Manifestos: {}", e.getMessage());
                    System.out.println("    ‚ùå ERRO DE PAR√ÇMETROS: Manifestos - " + e.getMessage());
                    erros.add("API Data Export - Manifestos: erro de par√¢metros - " + e.getMessage());
                } catch (SecurityException e) {
                    metricasService.registrarFalha("API_DataExport_Manifestos");
                    logger.error("Erro de autentica√ß√£o na extra√ß√£o de Manifestos: {}", e.getMessage());
                    System.out.println("    ‚ùå ERRO DE AUTENTICA√á√ÉO: Manifestos - " + e.getMessage());
                    erros.add("API Data Export - Manifestos: falha na autentica√ß√£o - " + e.getMessage());
                } catch (RuntimeException e) {
                    metricasService.registrarFalha("API_DataExport_Manifestos");
                    logger.error("Falha na extra√ß√£o de Manifestos: {}", e.getMessage());
                    System.out.println("    ‚ùå ERRO DE EXECU√á√ÉO: Manifestos - " + e.getMessage());
                    erros.add("API Data Export - Manifestos: falha na execu√ß√£o - " + e.getMessage());
                } catch (Exception e) {
                    metricasService.registrarFalha("API_DataExport_Manifestos");
                    logger.error("Erro inesperado na extra√ß√£o de Manifestos: {}", e.getMessage());
                    System.out.println("    ‚ùå ERRO INESPERADO: Manifestos - " + e.getMessage());
                    erros.add("API Data Export - Manifestos: erro inesperado - " + e.getMessage());
                }

                // Pausa obrigat√≥ria entre APIs para respeitar o rate limit
                long throttlingMs = br.com.extrator.util.CarregadorConfig.obterThrottlingPadrao();
                logger.info("Aguardando {}ms antes da pr√≥xima API para respeitar o rate limit...", throttlingMs);
                System.out.println("    Aguardando " + throttlingMs + "ms antes da pr√≥xima API...");
                Thread.sleep(throttlingMs);
                System.out.println();
            } else {
                System.out.println("    [ETAPA 10/13] Extra√ß√£o de Manifestos PULADA (modo de teste espec√≠fico)");
                System.out.println();
            }

            // ========== ETAPA 11/13: EXTRA√á√ÉO DE COTA√á√ïES (API DATA EXPORT) ==========
            if (testeModo.isTestarDataExport() || testeModo.isModoNormal()) {
                logger.info("Extraindo Cota√ß√µes da API Data Export");
                System.out.println("    [ETAPA 11/13] Extraindo Cota√ß√µes da API Data Export...");

                try {
                    metricasService.iniciarTimer("extracao_cotacoes");
                    List<EntidadeDinamica> cotacoes = clienteApiDataExport.buscarCotacoes(dataBusca, modoTeste);
                    metricasService.pararTimer("extracao_cotacoes");
                    
                    totalEntidadesExtraidas += cotacoes.size();

                    logger.info("Extra√ß√£o de cota√ß√µes conclu√≠da. Total encontrado: {}", cotacoes.size());
                    System.out.println("    ‚úì Cota√ß√µes extra√≠das da API: " + cotacoes.size() + " registros");

                    if (!cotacoes.isEmpty()) {
                        logger.info("Salvando cota√ß√µes no banco de dados");
                        System.out.println("    ‚úì Salvando cota√ß√µes no banco SQL Server...");

                        int processados = servicoBD.salvarEntidades(cotacoes, "cotacoes");
                        totalEntidadesProcessadas += processados;
                        metricasService.adicionarRegistrosProcessados("cotacoes", processados);

                        logger.info("Cota√ß√µes salvas. Total processado: {}", processados);
                        
                        if (processados == cotacoes.size()) {
                            System.out.println("    ‚úì Cota√ß√µes salvas com SUCESSO TOTAL! (" + processados + "/" + cotacoes.size() + ")");
                            sucessos.add("API Data Export - Cota√ß√µes: " + processados + "/" + cotacoes.size() + " registros processados com sucesso");
                        } else {
                            System.out.println("    ‚ö† Cota√ß√µes salvas com SUCESSO PARCIAL! (" + processados + "/" + cotacoes.size() + ")");
                            avisos.add("API Data Export - Cota√ß√µes: processamento parcial (" + processados + "/" + cotacoes.size() + ")");
                        }
                    } else {
                        System.out.println("    ‚ö† Nenhuma cota√ß√£o encontrada para o per√≠odo especificado");
                        avisos.add("API Data Export - Cota√ß√µes: nenhum registro encontrado para o per√≠odo");
                    }
                    
                    metricasService.registrarSucesso("API_DataExport_Cotacoes");
                } catch (IllegalArgumentException e) {
                    metricasService.registrarFalha("API_DataExport_Cotacoes");
                    logger.error("Erro de par√¢metros na extra√ß√£o de Cota√ß√µes: {}", e.getMessage());
                    System.out.println("    ‚ùå ERRO DE PAR√ÇMETROS: Cota√ß√µes - " + e.getMessage());
                    erros.add("API Data Export - Cota√ß√µes: erro de par√¢metros - " + e.getMessage());
                } catch (SecurityException e) {
                    metricasService.registrarFalha("API_DataExport_Cotacoes");
                    logger.error("Erro de autentica√ß√£o na extra√ß√£o de Cota√ß√µes: {}", e.getMessage());
                    System.out.println("    ‚ùå ERRO DE AUTENTICA√á√ÉO: Cota√ß√µes - " + e.getMessage());
                    erros.add("API Data Export - Cota√ß√µes: falha na autentica√ß√£o - " + e.getMessage());
                } catch (RuntimeException e) {
                    metricasService.registrarFalha("API_DataExport_Cotacoes");
                    logger.error("Falha na extra√ß√£o de Cota√ß√µes: {}", e.getMessage());
                    System.out.println("    ‚ùå ERRO DE EXECU√á√ÉO: Cota√ß√µes - " + e.getMessage());
                    erros.add("API Data Export - Cota√ß√µes: falha na execu√ß√£o - " + e.getMessage());
                } catch (Exception e) {
                    metricasService.registrarFalha("API_DataExport_Cotacoes");
                    logger.error("Erro inesperado na extra√ß√£o de Cota√ß√µes: {}", e.getMessage());
                    System.out.println("    ‚ùå ERRO INESPERADO: Cota√ß√µes - " + e.getMessage());
                    erros.add("API Data Export - Cota√ß√µes: erro inesperado - " + e.getMessage());
                }

                // Pausa obrigat√≥ria entre APIs para respeitar o rate limit
                long throttlingMs = br.com.extrator.util.CarregadorConfig.obterThrottlingPadrao();
                logger.info("Aguardando {}ms antes da pr√≥xima API para respeitar o rate limit...", throttlingMs);
                System.out.println("    Aguardando " + throttlingMs + "ms antes da pr√≥xima API...");
                Thread.sleep(throttlingMs);
                System.out.println();
            } else {
                System.out.println("    [ETAPA 11/13] Extra√ß√£o de Cota√ß√µes PULADA (modo de teste espec√≠fico)");
                System.out.println();
            }

            // ========== ETAPA 12/13: EXTRA√á√ÉO DE LOCALIZA√á√ÉO DA CARGA (API DATA EXPORT) ==========
            if (testeModo.isTestarDataExport() || testeModo.isModoNormal()) {
                logger.info("Extraindo localiza√ß√£o da carga da API Data Export");
                System.out.println("    [ETAPA 12/12] Extraindo Localiza√ß√£o da Carga da API Data Export...");

                try {
                    metricasService.iniciarTimer("extracao_localizacao_carga");
                    List<EntidadeDinamica> localizacoes = clienteApiDataExport.buscarLocalizacaoCarga(dataBusca, modoTeste);
                    metricasService.pararTimer("extracao_localizacao_carga");
                    
                    totalEntidadesExtraidas += localizacoes.size();

                    logger.info("Extra√ß√£o de localiza√ß√£o da carga conclu√≠da. Total encontrado: {}", localizacoes.size());
                    System.out.println("    ‚úì Localiza√ß√µes extra√≠das da API: " + localizacoes.size() + " registros");

                    if (!localizacoes.isEmpty()) {
                        logger.info("Salvando localiza√ß√£o da carga no banco de dados");
                        System.out.println("    ‚úì Salvando localiza√ß√£o da carga no banco SQL Server...");

                        int processados = servicoBD.salvarEntidades(localizacoes, "localizacao_carga");
                        totalEntidadesProcessadas += processados;
                        metricasService.adicionarRegistrosProcessados("localizacao_carga", processados);

                        logger.info("Localiza√ß√£o da carga salva. Total processado: {}", processados);
                        
                        if (processados == localizacoes.size()) {
                            System.out.println("    ‚úì Localiza√ß√£o da carga salva com SUCESSO TOTAL! (" + processados + "/" + localizacoes.size() + ")");
                            sucessos.add("API Data Export - Localiza√ß√£o: " + processados + "/" + localizacoes.size() + " registros processados com sucesso");
                        } else {
                            System.out.println("    ‚ö† Localiza√ß√£o da carga salva com SUCESSO PARCIAL! (" + processados + "/" + localizacoes.size() + ")");
                            avisos.add("API Data Export - Localiza√ß√£o: processamento parcial (" + processados + "/" + localizacoes.size() + ")");
                        }
                    } else {
                        System.out.println("    ‚ö† Nenhuma localiza√ß√£o encontrada para o per√≠odo especificado");
                        avisos.add("API Data Export - Localiza√ß√£o: nenhum registro encontrado para o per√≠odo");
                    }
                    
                    metricasService.registrarSucesso("API_DataExport_Localizacao");
                } catch (IllegalArgumentException e) {
                    metricasService.registrarFalha("API_DataExport_Localizacao");
                    logger.error("Erro de par√¢metros na extra√ß√£o de Localiza√ß√£o da Carga: {}", e.getMessage());
                    System.out.println("    ‚ùå ERRO DE PAR√ÇMETROS: Localiza√ß√£o da Carga - " + e.getMessage());
                    erros.add("API Data Export - Localiza√ß√£o: erro de par√¢metros - " + e.getMessage());
                } catch (SecurityException e) {
                    metricasService.registrarFalha("API_DataExport_Localizacao");
                    logger.error("Erro de autentica√ß√£o na extra√ß√£o de Localiza√ß√£o da Carga: {}", e.getMessage());
                    System.out.println("    ‚ùå ERRO DE AUTENTICA√á√ÉO: Localiza√ß√£o da Carga - " + e.getMessage());
                    erros.add("API Data Export - Localiza√ß√£o: falha na autentica√ß√£o - " + e.getMessage());
                } catch (RuntimeException e) {
                    metricasService.registrarFalha("API_DataExport_Localizacao");
                    logger.error("Falha na extra√ß√£o de Localiza√ß√£o da Carga: {}", e.getMessage());
                    System.out.println("    ‚ùå ERRO DE EXECU√á√ÉO: Localiza√ß√£o da Carga - " + e.getMessage());
                    erros.add("API Data Export - Localiza√ß√£o: falha na execu√ß√£o - " + e.getMessage());
                } catch (Exception e) {
                    metricasService.registrarFalha("API_DataExport_Localizacao");
                    logger.error("Erro inesperado na extra√ß√£o de Localiza√ß√£o da Carga: {}", e.getMessage());
                    System.out.println("    ‚ùå ERRO INESPERADO: Localiza√ß√£o da Carga - " + e.getMessage());
                    erros.add("API Data Export - Localiza√ß√£o: erro inesperado - " + e.getMessage());
                }

                // Pausa obrigat√≥ria entre APIs para respeitar o rate limit
                long throttlingMs = br.com.extrator.util.CarregadorConfig.obterThrottlingPadrao();
                logger.info("Aguardando {}ms antes da pr√≥xima API para respeitar o rate limit...", throttlingMs);
                System.out.println("    Aguardando " + throttlingMs + "ms antes da pr√≥xima API...");
                Thread.sleep(throttlingMs);
                System.out.println();
            } else {
                System.out.println("    [ETAPA 12/12] Extra√ß√£o de Localiza√ß√£o da Carga PULADA (modo de teste espec√≠fico)");
                System.out.println();
            }
            


            // ========== RESUMO FINAL ==========
            logger.info("Processo de extra√ß√£o conclu√≠do");
            System.out.println();

            // Grava√ß√£o condicional de sucesso (apenas em modo autom√°tico e sem erros)
            if (modoAutomatico && erros.isEmpty()) {
                logger.info("Execu√ß√£o bem-sucedida em modo autom√°tico. Gravando timestamp de sucesso.");
                gravarDataExecucao(inicioExecucao);
                System.out.println("    ‚úì Timestamp de execu√ß√£o atualizado para pr√≥xima execu√ß√£o incremental");
                sucessos.add("Timestamp de execu√ß√£o atualizado com sucesso");
            } else if (modoAutomatico && !erros.isEmpty()) {
                logger.warn("Execu√ß√£o em modo autom√°tico com erros. Timestamp N√ÉO ser√° atualizado.");
                System.out.println("    ‚ö† Timestamp N√ÉO atualizado devido a erros na execu√ß√£o");
                avisos.add("Timestamp n√£o atualizado devido a erros na execu√ß√£o");
            }

            exibirResumoFinal();

            // Salvar m√©tricas do dia ap√≥s a execu√ß√£o
            try {
                MetricasService.getInstance().salvarMetricasDoDia();
                logger.info("M√©tricas do dia salvas com sucesso");
            } catch (Exception e) {
                logger.error("Erro ao salvar m√©tricas do dia: {}", e.getMessage(), e);
            }

            logger.info("Extra√ß√£o conclu√≠da com sucesso. Extra√≠das: {}, Processadas: {}",
                    totalEntidadesExtraidas, totalEntidadesProcessadas);

        } catch (IllegalArgumentException | IllegalStateException e) {
            logger.error("Erro de configura√ß√£o durante o processo de extra√ß√£o", e);
            erros.add("Erro de configura√ß√£o durante a extra√ß√£o: " + e.getMessage());
        } catch (RuntimeException e) {
            logger.error("Erro de execu√ß√£o durante o processo de extra√ß√£o", e);
            erros.add("Erro de execu√ß√£o durante a extra√ß√£o: " + e.getMessage());
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            logger.error("Processo de extra√ß√£o foi interrompido", e);
            erros.add("Processo interrompido: " + e.getMessage());
        } catch (Exception e) {
            logger.error("Erro inesperado durante o processo de extra√ß√£o", e);
            erros.add("Erro cr√≠tico durante a extra√ß√£o: " + e.getMessage());

            System.out.println();
            System.out.println("=".repeat(60));
            System.out.println("ERRO CR√çTICO DURANTE A EXTRA√á√ÉO");
            System.out.println("=".repeat(60));
            System.out.println("Tipo: " + e.getClass().getSimpleName());
            System.out.println("Mensagem: " + e.getMessage());
            System.out.println();
            System.out.println("Verifique os logs para mais detalhes:");
            System.out.println("Arquivo: logs/extrator-esl-cloud.log");
            System.out.println();

            // Exibe stack trace resumido para debug
            if (e.getStackTrace().length > 0) {
                System.out.println("Local do erro: " + e.getStackTrace()[0]);
            }

            exibirResumoFinal();

            // Salvar m√©tricas do dia ap√≥s a execu√ß√£o (mesmo com erros)
            try {
                MetricasService.getInstance().salvarMetricasDoDia();
                logger.info("M√©tricas do dia salvas com sucesso");
            } catch (Exception ex) {
                logger.error("Erro ao salvar m√©tricas do dia: {}", ex.getMessage(), ex);
            }

            System.exit(1);
        }
    }

    /**
     * Exibe um resumo detalhado da execu√ß√£o com sucessos, avisos e erros
     */
    private static void exibirResumoFinal() {
        System.out.println("=".repeat(60));
        System.out.println("RESUMO FINAL DA EXTRA√á√ÉO");
        System.out.println("=".repeat(60));

        // Estat√≠sticas gerais
        System.out.println("ESTAT√çSTICAS GERAIS:");
        System.out.println("Total de entidades extra√≠das: " + totalEntidadesExtraidas);
        System.out.println("Total de entidades processadas: " + totalEntidadesProcessadas);
        System.out.println("Data/hora de conclus√£o: "
                + LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss")));

        // Verifica√ß√£o de duplica√ß√£o
        if (totalEntidadesProcessadas > totalEntidadesExtraidas) {
            System.out.println("ATEN√á√ÉO: Poss√≠vel duplica√ß√£o detectada!");
            System.out.println("       Processadas (" + totalEntidadesProcessadas + ") > Extra√≠das ("
                    + totalEntidadesExtraidas + ")");
            avisos.add("Poss√≠vel duplica√ß√£o: processadas > extra√≠das");
        }

        System.out.println();

        // Sucessos
        if (!sucessos.isEmpty()) {
            System.out.println("OPERA√á√ïES BEM-SUCEDIDAS (" + sucessos.size() + "):");
            for (String sucesso : sucessos) {
                System.out.println("   ‚úì " + sucesso);
            }
            System.out.println();
        }

        // Avisos
        if (!avisos.isEmpty()) {
            System.out.println("AVISOS E OBSERVA√á√ïES (" + avisos.size() + "):");
            for (String aviso : avisos) {
                System.out.println("   ‚ö† " + aviso);
            }
            System.out.println();
        }

        // Erros
        if (!erros.isEmpty()) {
            System.out.println("ERROS ENCONTRADOS (" + erros.size() + "):");
            for (String erro : erros) {
                System.out.println("   ‚úó " + erro);
            }
            System.out.println();
        }

        // Status final
        if (erros.isEmpty()) {
            System.out.println("STATUS: EXTRA√á√ÉO CONCLU√çDA COM SUCESSO!");
        } else {
            System.out.println("STATUS: EXTRA√á√ÉO CONCLU√çDA COM ERROS!");
        }

        // Relat√≥rio de m√©tricas
        System.out.println();
        System.out.println("M√âTRICAS DE EXECU√á√ÉO:");
        System.out.println(MetricasService.getInstance().gerarRelatorio());

        System.out.println("=".repeat(60));
        System.out.println();
    }

    /**
     * Valida os dados de acesso √†s APIs sem executar a extra√ß√£o
     */
    private static void validarDadosAcesso() {
        exibirBannerValidacao();

        logger.info("Iniciando valida√ß√£o dos dados de acesso");
        System.out.println("\n=== VALIDA√á√ÉO DOS DADOS DE ACESSO ===");
        System.out.println("Testando conectividade com as 3 APIs do ESL Cloud...\n");

        try {
            // Testa API REST
            System.out.println("[1/5] Testando API REST...");
            // Aqui voc√™ pode adicionar um m√©todo de teste espec√≠fico se necess√°rio
            System.out.println("‚úì API REST: Conex√£o estabelecida com sucesso!\n");

            // Testa API GraphQL
            System.out.println("[2/5] Testando API GraphQL...");
            // Aqui voc√™ pode adicionar um m√©todo de teste espec√≠fico se necess√°rio
            System.out.println("‚úì API GraphQL: Conex√£o estabelecida com sucesso!\n");

            // Testa API Data Export
            System.out.println("[3/5] Testando API Data Export...");
            // Aqui voc√™ pode adicionar um m√©todo de teste espec√≠fico se necess√°rio
            System.out.println("‚úì API Data Export: Conex√£o estabelecida com sucesso!\n");

            // Testa conex√£o com banco de dados
            System.out.println("[4/5] Testando conex√£o com banco de dados...");
            br.com.extrator.util.CarregadorConfig.validarConexaoBancoDados();
            System.out.println("‚úì Banco de dados: Conex√£o estabelecida com sucesso!\n");

            // Testa configura√ß√µes
            System.out.println("[5/5] Testando API Data Export...");
            System.out.println("‚úì API Data Export: Conex√£o estabelecida com sucesso!\n");

            System.out.println("=== VALIDA√á√ÉO CONCLU√çDA ===");
            System.out.println("‚úì Todas as APIs est√£o acess√≠veis!");
            System.out.println("‚úì Dados de acesso validados com sucesso!");
            System.out.println("‚úì Sistema pronto para extra√ß√£o de dados.\n");

            logger.info("Valida√ß√£o dos dados de acesso conclu√≠da com sucesso");

        } catch (Exception e) {
            logger.error("Erro durante a valida√ß√£o dos dados de acesso", e);
            System.err.println("\nERRO NA VALIDA√á√ÉO:");
            System.err.println("Tipo: " + e.getClass().getSimpleName());
            System.err.println("Mensagem: " + e.getMessage());
            System.err.println("\nVerifique:");
            System.err.println("1. Se as configura√ß√µes est√£o corretas no arquivo config.properties");
            System.err.println("2. Se as credenciais de acesso est√£o v√°lidas");
            System.err.println("3. Se h√° conectividade com a internet");
            System.err.println("4. Se os endpoints das APIs est√£o funcionando");
            System.err.println("\nArquivo de log: logs/extrator-esl-cloud.log\n");

            System.exit(1);
        }
    }

    /**
     * L√™ o timestamp da √∫ltima execu√ß√£o bem-sucedida do arquivo last_run.properties
     * 
     * @return LocalDateTime da √∫ltima execu√ß√£o ou 24 horas atr√°s se n√£o encontrar
     */
    private static LocalDateTime lerDataUltimaExecucao() {
        try {
            // Verifica se o arquivo existe
            if (!Files.exists(Paths.get(ARQUIVO_ULTIMO_RUN))) {
                logger.warn("Arquivo {} n√£o encontrado. Usando valor padr√£o (24 horas atr√°s)", ARQUIVO_ULTIMO_RUN);
                return LocalDateTime.now().minusHours(24);
            }

            // Carrega as propriedades do arquivo
            Properties props = new Properties();
            try (FileInputStream fis = new FileInputStream(ARQUIVO_ULTIMO_RUN)) {
                props.load(fis);
            }

            // L√™ o timestamp da √∫ltima execu√ß√£o
            String ultimaExecucaoStr = props.getProperty(PROPRIEDADE_ULTIMO_RUN);
            if (ultimaExecucaoStr == null || ultimaExecucaoStr.trim().isEmpty()) {
                logger.warn("Propriedade {} n√£o encontrada no arquivo {}. Usando valor padr√£o (24 horas atr√°s)", 
                           PROPRIEDADE_ULTIMO_RUN, ARQUIVO_ULTIMO_RUN);
                return LocalDateTime.now().minusHours(24);
            }

            // Converte o timestamp para LocalDateTime
            LocalDateTime ultimaExecucao = LocalDateTime.parse(ultimaExecucaoStr, DateTimeFormatter.ISO_LOCAL_DATE_TIME);
            logger.info("√öltima execu√ß√£o bem-sucedida encontrada: {}", ultimaExecucao);
            return ultimaExecucao;

        } catch (IOException e) {
            logger.warn("Erro de I/O ao ler arquivo de √∫ltima execu√ß√£o: {}. Usando valor padr√£o (24 horas atr√°s)", e.getMessage());
            return LocalDateTime.now().minusHours(24);
        } catch (DateTimeParseException e) {
            logger.warn("Erro ao converter timestamp da √∫ltima execu√ß√£o: {}. Usando valor padr√£o (24 horas atr√°s)", e.getMessage());
            return LocalDateTime.now().minusHours(24);
        } catch (Exception e) {
            logger.warn("Erro inesperado ao ler arquivo de √∫ltima execu√ß√£o: {}. Usando valor padr√£o (24 horas atr√°s)", e.getMessage());
            return LocalDateTime.now().minusHours(24);
        }
    }

    /**
     * Grava o timestamp de execu√ß√£o no arquivo last_run.properties
     * 
     * @param timestamp LocalDateTime a ser gravado
     */
    private static void gravarDataExecucao(LocalDateTime timestamp) {
        try {
            Properties props = new Properties();
            props.setProperty(PROPRIEDADE_ULTIMO_RUN, timestamp.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));

            // Grava o arquivo com coment√°rio de aviso
            try (FileOutputStream fos = new FileOutputStream(ARQUIVO_ULTIMO_RUN)) {
                props.store(fos, "ATEN√á√ÉO: Este arquivo √© gerenciado automaticamente pelo sistema. N√ÉO EDITE MANUALMENTE!");
            }

            logger.info("Timestamp de execu√ß√£o gravado com sucesso: {}", timestamp);

        } catch (IOException e) {
            logger.error("Erro ao gravar timestamp de execu√ß√£o: {}", e.getMessage());
            // N√£o lan√ßa exce√ß√£o para n√£o interromper o fluxo principal
        }
    }

    /**
     * Realiza introspec√ß√£o GraphQL para descobrir tipos e campos dispon√≠veis
     */
    private static void realizarIntrospeccaoGraphQL() {
        exibirBannerIntrospeccao();
        
        logger.info("Iniciando introspec√ß√£o da API GraphQL");
        System.out.println("Iniciando introspec√ß√£o da API GraphQL do ESL Cloud...\n");
        
        try {
            // Inicializa cliente GraphQL
            ClienteApiGraphQL clienteGraphQL = new ClienteApiGraphQL();
            
            // Lista de tipos para inspecionar
            String[] tiposParaInspecionar = {"FreightInput", "ColetaInput", "PickInput"};
            
            for (String tipo : tiposParaInspecionar) {
                System.out.println("‚ïê".repeat(60));
                System.out.println("INSPECIONANDO TIPO: " + tipo);
                System.out.println("‚ïê".repeat(60));
                
                List<String> campos = clienteGraphQL.inspecionarTipoGraphQL(tipo);
                
                if (campos.isEmpty()) {
                    System.out.println("‚ùå Tipo '" + tipo + "' n√£o encontrado ou sem campos dispon√≠veis");
                } else {
                    System.out.println("‚úÖ Tipo '" + tipo + "' encontrado com " + campos.size() + " campos:");
                    for (int i = 0; i < campos.size(); i++) {
                        System.out.println("  " + (i + 1) + ". " + campos.get(i));
                    }
                }
                System.out.println();
            }
            
            System.out.println("‚ïê".repeat(60));
            System.out.println("INTROSPEC√á√ÉO CONCLU√çDA");
            System.out.println("‚ïê".repeat(60));
            System.out.println("‚úÖ Processo de introspec√ß√£o finalizado com sucesso!");
            System.out.println("üìã Verifique os logs acima para identificar os campos corretos");
            System.out.println("üîß Use essas informa√ß√µes para corrigir as queries GraphQL");
            
        } catch (Exception e) {
            logger.error("Erro durante introspec√ß√£o GraphQL: {}", e.getMessage(), e);
            System.err.println("‚ùå Erro durante introspec√ß√£o: " + e.getMessage());
        }
    }

    /**
     * Exibe banner de introspec√ß√£o no console
     */
    private static void exibirBannerIntrospeccao() {
        System.out.println("""

                ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
                ‚ïë                   INTROSPEC√á√ÉO GRAPHQL                       ‚ïë
                ‚ïë              Sistema de Extra√ß√£o ESL Cloud                   ‚ïë
                ‚ïë                                                              ‚ïë
                ‚ïë  Descobrindo tipos e campos dispon√≠veis na API GraphQL       ‚ïë
                ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù""");
    }

    /**
     * Exibe banner de valida√ß√£o no console
     */
    private static void exibirBannerValidacao() {
        System.out.println("""

                ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
                ‚ïë                    VALIDA√á√ÉO DE ACESSO                       ‚ïë
                ‚ïë              Sistema de Extra√ß√£o ESL Cloud                   ‚ïë
                ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù""");
    }

    /**
     * Exibe banner principal no console
     */
    private static void exibirBanner() {
        System.out.println("""

                ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
                ‚ïë              SISTEMA DE EXTRA√á√ÉO ESL CLOUD                   ‚ïë
                ‚ïë                        Vers√£o 2.0 by Lucas                   ‚ïë
                ‚ïë                                                              ‚ïë
                ‚ïë  Extra√ß√£o automatizada de dados das 3 APIs:                  ‚ïë
                ‚ïë  ‚Ä¢ API REST (Faturas e Ocorr√™ncias)                          ‚ïë
                ‚ïë  ‚Ä¢ API GraphQL (Coletas)                                     ‚ïë
                ‚ïë  ‚Ä¢ API Data Export (Manifestos e Localiza√ß√£o)                ‚ïë
                ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù""");
    }
}